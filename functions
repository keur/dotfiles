# Update my system!
morning() {
    # stupid hack to run the function as root
    DECL=$(declare -f _morning)
    if [[ $EUID -ne 0 ]]; then
        sudo bash -c "$DECL; _morning $DIST"
    else
        bash -c "$DECL; _morning $DIST"
    fi

    # Non-root updates
    if [[ "$DIST" == "arch" ]]; then
        yay -Syu --noconfirm
    fi
}

_morning() {
    case "$1" in
        arch)
            pacman -Syyu --noconfirm && \
                pacman -R $(pacman -Qdtq) && \
                paccache -rk 2
            ;;
        fedora)
            dnf update -y && \
                dnf upgrade -y && \
                dnf autoremove -y
            ;;
        debian|ubuntu)
            apt update -y && \
                apt upgrade -y && \
                apt autoremove -y
            ;;
    esac
}

# Remove trailing whitespace from files
rmwht() {
    for i in $@; do
        if [ ! -d "$i" ]; then
            sed -i 's/[[:space:]]\+$//' $i;
        fi;
    done;
}

termtitle() {
  printf "\033]0;$*\007";
}

# Convert machine code to shell code
mkshellcode() {
    for i in $(objdump -d $1 -M intel |grep "^ " |cut -f2); do echo -n '\x'$i; done;echo
}

# Show my top commands
topcmds() {
    cnt="20"
    if [ "$#" -gt 0 ]; then
        cnt="$1"
    fi
    history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n "$cnt"
}


# copy stream of 0s to a device
wipedev() {
    bs="4k"
    if [[ -z "$2" ]]; then
        bs="$2"
    fi
    echo $2
    sudo dd if=/dev/zero of=$1 bs="$bs" && sync
}

# Jump to a directory after a copy or move command
fol() {
    target=$(fc -lnr | perl -lne 'print $1 and last if /^\s*(?:cp|mv).*?((?:[^\s\0]|(?<=\\) |(?:(?<=")(?:.*?)(?=")))+$)/')

    if [ -z "$target" ]; then
        echo "No recent cp or mv cmds."
    else
        target=$(eval realpath "$target")
        # In case a custom filename was given...
        if [ -f "$target" ]; then
            target=$(dirname "$target")
        fi
        cd "$target"
    fi
}

treewith() {
    pstree -Aaps "$1" | perl -e '
        my $pid = shift;
        while(<>) {
            chomp;
            if (m/$pid/) {
                print "\e[1m\e[31m$_\e[0m\n";
            } else {
                print "$_\n";
            }
        }
        ' "$1"
}

ipinfo() {
    curl ipinfo.io/"$1"
}

# Start tmux with two cmatrix panes for the memes
leetmux() {
    if [[ $(type cmatrix 2>/dev/null) ]]; then
        PANE=$((($COLUMNS-2)/10))
        exec tmux new-session \; \
            split-window -h \; \
            split-window -h \; \
            select-pane -t 1 \; \
            resize-pane -t 0 -x $PANE \;  \
            send-keys -t 0 'cmatrix' C-m \;  \
            resize-pane -t 2 -x $PANE \; \
            send-keys -t 2 'cmatrix -C magenta' C-m \;
    else
        exec tmux
    fi
}

# stream to Twitch.tv
streaming() {
    INRES="1440x900" # input resolution
    OUTRES="1440x900" # output resolution
    FPS="30" # target FPS
    GOP="60" # i-frame interval, should be double of FPS,
    GOPMIN="30" # min i-frame interval, should be equal to fps,
    THREADS="2" # max 6
    CBR="2000k" # constant bitrate (should be between 1000k - 3000k)
    QUALITY="ultrafast"  # one of the many FFMPEG preset
    AUDIO_RATE="44100"
    STREAM_KEY="$1" # use the terminal command Streaming streamkeyhere to stream your video to twitch or justin
    SERVER="live-lax" # twitch server in Los Angeles, see http://bashtech.net/twitch/ingest.php for list

    ffmpeg -f x11grab -s "$INRES" -r "$FPS" -i :0.0+1600,0 -f alsa -i pulse -f alsa -i pulse -f flv -filter_complex amix=inputs=2 -ac 2 -ar $AUDIO_RATE \
      -vcodec libx264 -g $GOP -keyint_min $GOPMIN -b:v $CBR -minrate $CBR -maxrate $CBR -pix_fmt yuv420p\
      -s $OUTRES -preset $QUALITY -tune film -acodec libmp3lame -threads $THREADS -strict normal \
      -bufsize $CBR "rtmp://$SERVER.twitch.tv/app/$STREAM_KEY"
}

# Display all the bash color codes
bashcolors() {
    for clbg in {40..47} {100..107} 49 ; do
        #Foreground
        for clfg in {30..37} {90..97} 39 ; do
            #Formatting
            for attr in 0 1 2 4 5 7 ; do
                #Print the result
                echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
            done
            echo #Newline
        done
    done
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	# shellcheck disable=SC2199
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg -- .[^.]* *
	fi
}

# Use Git’s colored diff when available
if hash git &>/dev/null ; then
	diff() {
		git diff --no-index --color-words "$@"
	}
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		xdg-open .	> /dev/null 2>&1
	else
		xdg-open "$@" > /dev/null 2>&1
	fi
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo ""; # newline

	local tmp
	tmp=$(echo -e "GET / HTTP/1.0\\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
		echo "Common Name:"
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo ""; # newline
		echo "Subject Alternative Name(s):"
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# Simple calculator
calc() {
	local result=""
	result="$(printf "scale=10;%s\\n" "$*" | bc --mathlib | tr -d '\\\n')"
	#						└─ default (when `--mathlib` is used) is 20

	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		# add "0" for cases like ".5"
		# add "0" for cases like "-.5"
		# remove trailing zeros
		printf "%s" "$result" |
			sed -e 's/^\./0./'  \
			-e 's/^-\./-0./' \
			-e 's/0*$//;s/\.$//'
	else
		printf "%s" "$result"
	fi
	printf "\\n"
}

urlencode() {
  declare str="$*"
  declare encoded=""
  for ((i=0; i<${#str}; i++ ))
  do
    c=${str:$i:1}
    case "$c" in
      [-_.~a-zA-Z0-9]) x="$c" ;;
      *) printf -v x '%%%02x' "'$c" ;;
    esac
    encoded+="$x"
  done
  echo "$encoded"
}
